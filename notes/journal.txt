#
# Collection of thoughts, notes, observations, and overall progress of development.
#

[December:07]
        Deleted Bill.0 and generated a new branch, bill_a, from master.
        Verified the app works and generated data streams and candles.

        TODO: Figure out IO, in particular tainted actors and boxes.

        Pivot back to python to complete Dave's work.

        Discussed process and data flow with Dave.
            * asyncio needs return values to know when an event is done.
            * connect.py handles the netowrk directed acycle graph
            * 

        Observed the following:
            * When the data flow pattern is very choppy likely the market data source
              is closed.

            * Candle events can be used to debug streams and monitor frequency of
              data, moment of data.

[January:03-23]
        Where the code listens for pending ticker events it filters the events for those
        that match a given symbol and throw away everything else. This process occurs for
        all symbols with a contract.

        pendingTickersEvent is a global queue of data and is not meant to be a per symbol
        resource. It monitors the stream and queues all activity registered.

        This means that the data the code accesses for each symbol duplicates what is done
        for all symbols so in toy's case there is 2x more processing happening than needed.


ema crossover
few hundred milliseconds rresponse
kernel & financial engineering !
stocks, options (calls & puts), futures DI+/-, OBV, ema crossover, (my take: alpha, beta, gammer)


differing response time requirements: slow can be python, fastest should be c/c++, elixir for in between.


part II:
  how to pin threads to cores in C++.
  ought to be a good use of Qs / databases. Postgresql is supposed to be fast, very fast.
  maintain as much independence amount threads to avoid locks, race conditions, resource contentions.



  
